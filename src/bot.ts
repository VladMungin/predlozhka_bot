import {Context, Markup, Telegraf} from 'telegraf';
import {Update} from 'telegraf/typings/core/types/typegram';
import * as dotenv from 'dotenv';
import {BotState, PendingMessage} from './types';

dotenv.config();

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å callback_query
interface MyContext extends Context {
	update: Update;
}

class MessageReviewBot {
	private bot: Telegraf<MyContext>;
	private state: BotState;
	private botUsername: string;

	constructor() {
		const token = process.env.BOT_TOKEN;
		if (!token) {
			throw new Error('BOT_TOKEN is required');
		}

		this.botUsername = process.env.BOT_USERNAME!;
		if (!this.botUsername) {
			throw new Error('BOT_USERNAME is required');
		}

		this.bot = new Telegraf<MyContext>(token);
		this.state = {
			currentMessageIndex: 0,
			pendingMessages: new Map(),
			messageQueue: []
		};

		this.setupHandlers();
	}

	private setupHandlers(): void {
		// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
		this.bot.start(this.handleStart.bind(this));

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		this.bot.on('text', this.handleUserMessage.bind(this));

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π
		this.bot.on('photo', this.handleUserMessage.bind(this));
		this.bot.on('video', this.handleUserMessage.bind(this));
		this.bot.on('document', this.handleUserMessage.bind(this));
		this.bot.on('audio', this.handleUserMessage.bind(this));

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏) –∫–∞–∫ middleware
		this.bot.use(this.handleUserChoice.bind(this));

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–∞ - –†–ê–ó–î–ï–õ–ï–ù–´ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
		this.bot.action('admin_approve', this.handleAdminCallback.bind(this));
		this.bot.action('admin_reject', this.handleAdminCallback.bind(this));
		this.bot.action('admin_skip', this.handleAdminCallback.bind(this));

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
		this.bot.catch(this.handleError.bind(this));
	}

	private async handleStart(ctx: MyContext): Promise<void> {
		await ctx.reply(
				`–ü—Ä–∏–≤–µ—Ç, ${ctx.from?.first_name}! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.`
		);
	}

	private async handleUserMessage(ctx: MyContext): Promise<void> {
		const user = ctx.from;
		const message = ctx.message;

		if (!user || !message) return;

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
		const tempKey = `temp_${user.id}_${message.message_id}`;

		// –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const tempMessage: PendingMessage = {
			userId: user.id,
			userName: user.first_name,
			username: user.username,
			messageId: message.message_id,
			chatId: ctx.chat!.id,
			text: this.getMessageText(message),
			contentType: this.getMessageType(message),
			media: this.getMediaData(message),
			timestamp: Date.now(),
			publishType: 'pending' // –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
		};

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
		this.state.pendingMessages.set(tempKey, tempMessage);

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
		const choiceMessage = await ctx.reply(
				'–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?',
				Markup.inlineKeyboard([
					[
						Markup.button.callback('üìù –° –º–æ–∏–º –∏–º–µ–Ω–µ–º', `user_choice:with_name:${message.message_id}`),
						Markup.button.callback('üë§ –ê–Ω–æ–Ω–∏–º–Ω–æ', `user_choice:anonymous:${message.message_id}`)
					],
					[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', `user_choice:cancel:${message.message_id}`)]
				])
		);

		// –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		this.state.pendingMessages.set(`choice_${message.message_id}`, {
			...tempMessage,
			choiceMessageId: choiceMessage.message_id
		} as any);
	}

	private async handleUserChoice(ctx: MyContext, next: () => Promise<void>): Promise<void> {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback_query
		if (!('callback_query' in ctx.update)) {
			return next();
		}

		const callbackQuery = ctx.update.callback_query;
		if (!callbackQuery || !('data' in callbackQuery)) return next();

		const callbackData = callbackQuery.data;
		const user = ctx.from;

		if (!user || !callbackData.startsWith('user_choice:')) return next();

		const parts = callbackData.split(':');
		const choice = parts[1];
		const originalMessageId = parseInt(parts[2]);

		// –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∫–ª—é—á—É
		const tempKey = `temp_${user.id}_${originalMessageId}`;
		const tempMessage = this.state.pendingMessages.get(tempKey);

		if (!tempMessage) {
			await ctx.answerCbQuery('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.');
			return;
		}

		try {
			switch (choice) {
				case 'cancel':
					await ctx.editMessageText('‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
					// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
					this.state.pendingMessages.delete(tempKey);
					this.state.pendingMessages.delete(`choice_${originalMessageId}`);
					break;

				case 'with_name':
				case 'anonymous':
					// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
					const finalMessage: PendingMessage = {
						...tempMessage,
						publishType: choice as 'with_name' | 'anonymous'
					};

					// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
					this.state.messageQueue.push(finalMessage);
					const messageIndex = this.state.messageQueue.length - 1;
					this.state.pendingMessages.set(messageIndex.toString(), finalMessage);

					// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
					this.state.pendingMessages.delete(tempKey);
					this.state.pendingMessages.delete(`choice_${originalMessageId}`);

					// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					await ctx.editMessageText(
							choice === 'with_name' ?
									'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ (–±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å –≤–∞—à–∏–º –∏–º–µ–Ω–µ–º)!' :
									'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ (–±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ)!'
					);

					// –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∞–¥–º–∏–Ω—É
					if (this.state.messageQueue.length === 1) {
						await this.showNextMessageToAdmin();
					}
					break;
			}

			await ctx.answerCbQuery();
		} catch (error) {
			console.error('Error handling user choice:', error);
			await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
		}
	}

	private async handleAdminCallback(ctx: MyContext): Promise<void> {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback_query
		if (!('callback_query' in ctx.update)) {
			return;
		}

		const callbackQuery = ctx.update.callback_query;
		if (!callbackQuery || !('data' in callbackQuery)) return;

		const callbackData = callbackQuery.data;
		const adminId = parseInt(process.env.ADMIN_ID!);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ–≤–µ—Ä—à–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
		if (ctx.from?.id !== adminId) {
			await ctx.answerCbQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
			return;
		}

		try {
			switch (callbackData) {
				case 'admin_approve':
					await this.handleApprove(ctx);
					break;
				case 'admin_reject':
					await this.handleReject(ctx);
					break;
				case 'admin_skip':
					await this.handleSkip(ctx);
					break;
				default:
					await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.');
					return;
			}

			// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
			if (ctx.callbackQuery?.message) {
				try {
					await ctx.deleteMessage();
				} catch (deleteError) {
					console.error('Error deleting admin message:', deleteError);
				}
			}

			await ctx.answerCbQuery();
		} catch (error) {
			console.error('Error handling admin callback:', error);
			await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
		}
	}

	private getMessageText(message: any): string | undefined {
		if ('text' in message) return message.text;
		if ('caption' in message) return message.caption;
		return undefined;
	}

	private getMessageType(message: any): string {
		if ('text' in message) return 'text';
		if ('photo' in message) return 'photo';
		if ('video' in message) return 'video';
		if ('document' in message) return 'document';
		if ('audio' in message) return 'audio';
		return 'unknown';
	}

	private getMediaData(message: any): PendingMessage['media'] | undefined {
		if ('photo' in message && message.photo) {
			return {
				fileId: message.photo[message.photo.length - 1].file_id,
				type: 'photo',
				caption: message.caption
			};
		}
		if ('video' in message && message.video) {
			return {
				fileId: message.video.file_id,
				type: 'video',
				caption: message.caption
			};
		}
		if ('document' in message && message.document) {
			return {
				fileId: message.document.file_id,
				type: 'document',
				caption: message.caption
			};
		}
		if ('audio' in message && message.audio) {
			return {
				fileId: message.audio.file_id,
				type: 'audio',
				caption: message.caption
			};
		}
		return undefined;
	}

	private async showNextMessageToAdmin(): Promise<void> {
		if (this.state.messageQueue.length === 0) {
			await this.sendToAdmin('–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞.');
			return;
		}

		const currentMessage = this.state.messageQueue[this.state.currentMessageIndex];
		await this.sendMessageToAdmin(currentMessage);
	}

	private async sendMessageToAdmin(message: PendingMessage): Promise<void> {
		const adminId = parseInt(process.env.ADMIN_ID!);
		const caption = this.formatMessageCaption(message);

		try {
			if (message.media) {
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ
				switch (message.media.type) {
					case 'photo':
						await this.bot.telegram.sendPhoto(adminId, message.media.fileId, {
							caption: caption,
							parse_mode: 'HTML',
							...this.getAdminActionButtons()
						});
						break;
					case 'video':
						await this.bot.telegram.sendVideo(adminId, message.media.fileId, {
							caption: caption,
							parse_mode: 'HTML',
							...this.getAdminActionButtons()
						});
						break;
					case 'document':
						await this.bot.telegram.sendDocument(adminId, message.media.fileId, {
							caption: caption,
							parse_mode: 'HTML',
							...this.getAdminActionButtons()
						});
						break;
					case 'audio':
						await this.bot.telegram.sendAudio(adminId, message.media.fileId, {
							caption: caption,
							parse_mode: 'HTML',
							...this.getAdminActionButtons()
						});
						break;
				}
			} else if (message.text) {
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				await this.bot.telegram.sendMessage(adminId, caption, {
					parse_mode: 'HTML',
					...this.getAdminActionButtons()
				});
			}
		} catch (error) {
			console.error('Error sending message to admin:', error);
		}
	}

	private formatMessageCaption(message: PendingMessage): string {
		let caption = `<b>üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n`;
		caption += `<b>üë§ –ò–º—è:</b> ${message.userName}\n`;
		if (message.username) {
			caption += `<b>üì± Username:</b> @${message.username}\n`;
		}
		caption += `<b>üÜî ID:</b> ${message.userId}\n`;
		caption += `<b>üì¢ –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> ${message.publishType === 'with_name' ? '–° –∏–º–µ–Ω–µ–º –∞–≤—Ç–æ—Ä–∞' : '–ê–Ω–æ–Ω–∏–º–Ω–æ'}\n\n`;

		if (message.text) {
			caption += `<b>üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n${message.text}\n\n`;
		} else if (message.media?.caption) {
			caption += `<b>üìù –ü–æ–¥–ø–∏—Å—å:</b>\n${message.media.caption}\n\n`;
		}

		caption += `<b>‚è∞ –í—Ä–µ–º—è:</b> ${new Date(message.timestamp).toLocaleString('ru-RU')}`;

		return caption;
	}

	private getAdminActionButtons(): any {
		return Markup.inlineKeyboard([
			[Markup.button.callback('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', 'admin_approve')],
			[Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 'admin_reject')],
			[Markup.button.callback('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'admin_skip')]
		]);
	}

	private async handleApprove(ctx: MyContext): Promise<void> {
		const currentMessage = this.state.messageQueue[this.state.currentMessageIndex];

		if (!currentMessage) {
			await ctx.answerCbQuery('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
			return;
		}

		try {
			// –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			await this.publishToChannel(currentMessage);

			// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			await this.notifyUser(currentMessage.userId,
					'‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!' +
					(currentMessage.publishType === 'with_name' ? ' (—Å –≤–∞—à–∏–º –∏–º–µ–Ω–µ–º)' : ' (–∞–Ω–æ–Ω–∏–º–Ω–æ)')
			);

			// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
			await this.moveToNextMessage();
		} catch (error) {
			console.error('Error in handleApprove:', error);
			throw error;
		}
	}

	private async handleReject(ctx: MyContext): Promise<void> {
		const currentMessage = this.state.messageQueue[this.state.currentMessageIndex];

		if (!currentMessage) {
			await ctx.answerCbQuery('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
			return;
		}

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		await this.notifyUser(currentMessage.userId, '‚ùå –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.');

		// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
		await this.moveToNextMessage();
	}

	private async handleSkip(ctx: MyContext): Promise<void> {
		// –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
		await this.moveToNextMessage();
	}

	private async moveToNextMessage(): Promise<void> {
		// –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
		this.state.pendingMessages.delete(this.state.currentMessageIndex.toString());
		this.state.messageQueue.splice(this.state.currentMessageIndex, 1);

		// –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
		if (this.state.messageQueue.length === 0) {
			this.state.currentMessageIndex = 0;
			await this.sendToAdmin('‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
		} else {
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			await this.showNextMessageToAdmin();
		}
	}

	private async publishToChannel(message: PendingMessage): Promise<void> {
		const channelId = process.env.CHANNEL_ID;

		if (!channelId) {
			throw new Error('CHANNEL_ID is not configured');
		}

		// HTML —Ä–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
		const signature = `\n\n<a href="https://t.me/${this.botUsername}">–ü—Ä–µ–¥–ª–æ–∂–∫–∞</a>`;

		try {
			// –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			let finalCaption = '';
			let finalText = '';

			if (message.publishType === 'with_name') {
				// –° –∏–º–µ–Ω–µ–º –∞–≤—Ç–æ—Ä–∞
				const authorInfo = `–û—Ç: ${message.userName}${message.username ? ` (@${message.username})` : ''}`;

				if (message.media) {
					finalCaption = authorInfo;
					if (message.media.caption) {
						finalCaption += `\n\n${message.media.caption}`;
					}
				} else if (message.text) {
					finalText = `${authorInfo}\n\n${message.text}`;
				}
			} else {
				// –ê–Ω–æ–Ω–∏–º–Ω–æ
				if (message.media && message.media.caption) {
					finalCaption = message.media.caption;
				} else if (message.text) {
					finalText = message.text;
				}
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
			if (message.media) {
				finalCaption = finalCaption ? finalCaption + signature : signature;
			} else {
				finalText = finalText ? finalText + signature : signature;
			}

			// –î–ª—è HTML —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã HTML
			const escapeHTML = (text: string): string => {
				return text
						.replace(/&/g, '&amp;')
						.replace(/</g, '&lt;')
						.replace(/>/g, '&gt;');
			};

			if (message.media) {
				// –ü—É–±–ª–∏–∫—É–µ–º –º–µ–¥–∏–∞ –≤ –∫–∞–Ω–∞–ª —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
				const options = {
					caption: finalCaption ? escapeHTML(finalCaption) : undefined,
					parse_mode: 'HTML' as const
				};

				switch (message.media.type) {
					case 'photo':
						await this.bot.telegram.sendPhoto(channelId, message.media.fileId, options);
						break;
					case 'video':
						await this.bot.telegram.sendVideo(channelId, message.media.fileId, options);
						break;
					case 'document':
						await this.bot.telegram.sendDocument(channelId, message.media.fileId, options);
						break;
					case 'audio':
						await this.bot.telegram.sendAudio(channelId, message.media.fileId, options);
						break;
				}
			} else if (message.text) {
				// –ü—É–±–ª–∏–∫—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–∞–Ω–∞–ª —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
				await this.bot.telegram.sendMessage(channelId, escapeHTML(finalText), {
					parse_mode: 'HTML' as const
				});
			}
		} catch (error) {
			console.error('Error publishing to channel:', error);
			throw error;
		}
	}
	
	private async notifyUser(userId: number, text: string): Promise<void> {
		try {
			await this.bot.telegram.sendMessage(userId, text);
		} catch (error) {
			console.error('Error notifying user:', error);
		}
	}

	private async sendToAdmin(text: string): Promise<void> {
		const adminId = parseInt(process.env.ADMIN_ID!);
		try {
			await this.bot.telegram.sendMessage(adminId, text);
		} catch (error) {
			console.error('Error sending message to admin:', error);
		}
	}

	private handleError(error: any): void {
		console.error('Bot error:', error);
	}

	public launch(): void {
		this.bot.launch().then(() => {
			console.log('Bot started successfully');
		});

		// –í–∫–ª—é—á–∏—Ç—å graceful stop
		process.once('SIGINT', () => this.bot.stop('SIGINT'));
		process.once('SIGTERM', () => this.bot.stop('SIGTERM'));
	}
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new MessageReviewBot();
bot.launch();
